# Copyright (c) 2025 NVIDIA CORPORATION.  All rights reserved.

import glob
import logging
import os
import re
import subprocess
import sys

from pathlib import Path


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def compile_proto(proto_path, project_base):
    """Compile a proto files to Python code."""
    # Use the protoc command installed by grpcio-tools through Python
    # Use `project_base` as the root directory for the proto files such that protoc generates absolute imports
    # starting from the project root.
    cmd = [
        sys.executable,
        "-m",
        "grpc_tools.protoc",
        f"--proto_path={project_base}",
        f"--python_out={project_base}",
        f"--pyi_out={project_base}",
        f"--grpc_python_out={project_base}",
        proto_path,
    ]

    result = subprocess.run(cmd, capture_output=True, text=True)

    if result.returncode != 0:
        logger.error(f"Error generating code from {proto_path}")
        logger.error(result.stderr)
        raise RuntimeError(f"Error generating code from {proto_path}")


def main():
    """Main function."""
    # Get the path to the proto files

    if "BUILD_WORKSPACE_DIRECTORY" in os.environ:
        project_base = os.environ["BUILD_WORKSPACE_DIRECTORY"]
    else:
        project_base = Path(__file__).parent.parent.parent

    project_proto_dir = os.path.join(project_base, "nre", "grpc", "protos")

    # Create __init__.py in the output directory to make it importable
    init_file = os.path.join(project_proto_dir, "__init__.py")
    if not os.path.exists(init_file):
        with open(init_file, "w") as f:
            f.write("# Generated by update_generated.py\n")

    # Find all proto files
    proto_files = glob.glob(os.path.join(project_proto_dir, "*.proto"))
    logger.info(f"Found {len(proto_files)} proto file(s)")

    # Generate Python code from proto files
    for proto_file in proto_files:
        compile_proto(proto_file, project_base)

    # Post-process generated files: convert absolute imports into simple imports
    _pattern = re.compile(r"^from nre\.grpc\.protos import (\w+) as (\w+)$")
    for suffix in ("_pb2.py", "_pb2_grpc.py"):
        for py_file in glob.glob(os.path.join(project_proto_dir, f"*{suffix}")):
            with open(py_file, "r") as f:
                lines = f.readlines()
            with open(py_file, "w") as f:
                for line in lines:
                    m = _pattern.match(line)
                    if m:
                        module, alias = m.groups()
                        f.write(f"import nre.grpc.protos.{module} as {alias}\n")
                    else:
                        f.write(line)

    logger.info("Successfully generated Python code from proto files")


if __name__ == "__main__":
    main()