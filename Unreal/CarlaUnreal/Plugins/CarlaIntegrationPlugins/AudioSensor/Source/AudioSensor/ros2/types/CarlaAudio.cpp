// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaAudio.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaAudio.h"

#include "carla/ros2/plugin-utils/enable-fastdds-include.h" // start fastdds includes
#include <fastcdr/Cdr.h>
#include "carla/ros2/plugin-utils/disable-fastdds-include.h" // end fastdds includes

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define carla_interfaces_msg_CarlaAudio_max_cdr_typesize 488ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define carla_interfaces_msg_CarlaAudio_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;


carla_interfaces::msg::CarlaAudio::CarlaAudio()
{
    // std_msgs::msg::Header m_header

    // unsigned long m_sample_format
    m_sample_format = 0;
    // unsigned long m_num_channels
    m_num_channels = 0;
    // unsigned long m_sample_rate
    m_sample_rate = 0;
    // unsigned long m_chunk_size
    m_chunk_size = 0;
    // sequence<short> m_data


}

carla_interfaces::msg::CarlaAudio::~CarlaAudio()
{

}

carla_interfaces::msg::CarlaAudio::CarlaAudio(
        const CarlaAudio& x)
{
    m_header = x.m_header;
    m_sample_format = x.m_sample_format;
    m_num_channels = x.m_num_channels;
    m_sample_rate = x.m_sample_rate;
    m_chunk_size = x.m_chunk_size;
    m_data = x.m_data;
}

carla_interfaces::msg::CarlaAudio::CarlaAudio(
        CarlaAudio&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_sample_format = x.m_sample_format;
    m_num_channels = x.m_num_channels;
    m_sample_rate = x.m_sample_rate;
    m_chunk_size = x.m_chunk_size;
    m_data = std::move(x.m_data);
}

carla_interfaces::msg::CarlaAudio& carla_interfaces::msg::CarlaAudio::operator =(
        const CarlaAudio& x)
{

    m_header = x.m_header;
    m_sample_format = x.m_sample_format;
    m_num_channels = x.m_num_channels;
    m_sample_rate = x.m_sample_rate;
    m_chunk_size = x.m_chunk_size;
    m_data = x.m_data;

    return *this;
}

carla_interfaces::msg::CarlaAudio& carla_interfaces::msg::CarlaAudio::operator =(
        CarlaAudio&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_sample_format = x.m_sample_format;
    m_num_channels = x.m_num_channels;
    m_sample_rate = x.m_sample_rate;
    m_chunk_size = x.m_chunk_size;
    m_data = std::move(x.m_data);

    return *this;
}

bool carla_interfaces::msg::CarlaAudio::operator ==(
        const CarlaAudio& x) const
{

    return (m_header == x.m_header && m_sample_format == x.m_sample_format && m_num_channels == x.m_num_channels && m_sample_rate == x.m_sample_rate && m_chunk_size == x.m_chunk_size && m_data == x.m_data);
}

bool carla_interfaces::msg::CarlaAudio::operator !=(
        const CarlaAudio& x) const
{
    return !(*this == x);
}

size_t carla_interfaces::msg::CarlaAudio::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_interfaces_msg_CarlaAudio_max_cdr_typesize;
}

size_t carla_interfaces::msg::CarlaAudio::getCdrSerializedSize(
        const carla_interfaces::msg::CarlaAudio& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }




    return current_alignment - initial_alignment;
}

void carla_interfaces::msg::CarlaAudio::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_sample_format;
    scdr << m_num_channels;
    scdr << m_sample_rate;
    scdr << m_chunk_size;
    scdr << m_data;

}

void carla_interfaces::msg::CarlaAudio::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_sample_format;
    dcdr >> m_num_channels;
    dcdr >> m_sample_rate;
    dcdr >> m_chunk_size;
    dcdr >> m_data;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void carla_interfaces::msg::CarlaAudio::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void carla_interfaces::msg::CarlaAudio::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& carla_interfaces::msg::CarlaAudio::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& carla_interfaces::msg::CarlaAudio::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member sample_format
 * @param _sample_format New value for member sample_format
 */
void carla_interfaces::msg::CarlaAudio::sample_format(
        uint32_t _sample_format)
{
    m_sample_format = _sample_format;
}

/*!
 * @brief This function returns the value of member sample_format
 * @return Value of member sample_format
 */
uint32_t carla_interfaces::msg::CarlaAudio::sample_format() const
{
    return m_sample_format;
}

/*!
 * @brief This function returns a reference to member sample_format
 * @return Reference to member sample_format
 */
uint32_t& carla_interfaces::msg::CarlaAudio::sample_format()
{
    return m_sample_format;
}

/*!
 * @brief This function sets a value in member num_channels
 * @param _num_channels New value for member num_channels
 */
void carla_interfaces::msg::CarlaAudio::num_channels(
        uint32_t _num_channels)
{
    m_num_channels = _num_channels;
}

/*!
 * @brief This function returns the value of member num_channels
 * @return Value of member num_channels
 */
uint32_t carla_interfaces::msg::CarlaAudio::num_channels() const
{
    return m_num_channels;
}

/*!
 * @brief This function returns a reference to member num_channels
 * @return Reference to member num_channels
 */
uint32_t& carla_interfaces::msg::CarlaAudio::num_channels()
{
    return m_num_channels;
}

/*!
 * @brief This function sets a value in member sample_rate
 * @param _sample_rate New value for member sample_rate
 */
void carla_interfaces::msg::CarlaAudio::sample_rate(
        uint32_t _sample_rate)
{
    m_sample_rate = _sample_rate;
}

/*!
 * @brief This function returns the value of member sample_rate
 * @return Value of member sample_rate
 */
uint32_t carla_interfaces::msg::CarlaAudio::sample_rate() const
{
    return m_sample_rate;
}

/*!
 * @brief This function returns a reference to member sample_rate
 * @return Reference to member sample_rate
 */
uint32_t& carla_interfaces::msg::CarlaAudio::sample_rate()
{
    return m_sample_rate;
}

/*!
 * @brief This function sets a value in member chunk_size
 * @param _chunk_size New value for member chunk_size
 */
void carla_interfaces::msg::CarlaAudio::chunk_size(
        uint32_t _chunk_size)
{
    m_chunk_size = _chunk_size;
}

/*!
 * @brief This function returns the value of member chunk_size
 * @return Value of member chunk_size
 */
uint32_t carla_interfaces::msg::CarlaAudio::chunk_size() const
{
    return m_chunk_size;
}

/*!
 * @brief This function returns a reference to member chunk_size
 * @return Reference to member chunk_size
 */
uint32_t& carla_interfaces::msg::CarlaAudio::chunk_size()
{
    return m_chunk_size;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void carla_interfaces::msg::CarlaAudio::data(
        const std::vector<int16_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void carla_interfaces::msg::CarlaAudio::data(
        std::vector<int16_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<int16_t>& carla_interfaces::msg::CarlaAudio::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<int16_t>& carla_interfaces::msg::CarlaAudio::data()
{
    return m_data;
}


size_t carla_interfaces::msg::CarlaAudio::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_interfaces_msg_CarlaAudio_max_key_cdr_typesize;
}

bool carla_interfaces::msg::CarlaAudio::isKeyDefined()
{
    return false;
}

void carla_interfaces::msg::CarlaAudio::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}



