// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaCameraControl.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaCameraControl.h"
#include "carla/ros2/plugin-utils/enable-fastdds-include.h" // start fastdds includes
#include <fastcdr/Cdr.h>
#include <fastcdr/exceptions/BadParamException.h>
#include "carla/ros2/plugin-utils/disable-fastdds-include.h" // end fastdds includes

using namespace eprosima::fastcdr::exception;

#include <utility>

#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define carla_interfaces_msg_CarlaCameraControl_max_cdr_typesize 280ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define carla_interfaces_msg_CarlaCameraControl_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;

carla_interfaces::msg::CarlaCameraControl::CarlaCameraControl()
{
    // std_msgs::msg::Header m_header

    // float m_pan
    m_pan = -999.0;
    // float m_tilt
    m_tilt = -999.0;
    // float m_zoom
    m_zoom = -999.0;

}

carla_interfaces::msg::CarlaCameraControl::~CarlaCameraControl()
{




}

carla_interfaces::msg::CarlaCameraControl::CarlaCameraControl(
        const CarlaCameraControl& x)
{
    m_header = x.m_header;
    m_pan = x.m_pan;
    m_tilt = x.m_tilt;
    m_zoom = x.m_zoom;
}

carla_interfaces::msg::CarlaCameraControl::CarlaCameraControl(
        CarlaCameraControl&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_pan = x.m_pan;
    m_tilt = x.m_tilt;
    m_zoom = x.m_zoom;
}

carla_interfaces::msg::CarlaCameraControl& carla_interfaces::msg::CarlaCameraControl::operator =(
        const CarlaCameraControl& x)
{

    m_header = x.m_header;
    m_pan = x.m_pan;
    m_tilt = x.m_tilt;
    m_zoom = x.m_zoom;

    return *this;
}

carla_interfaces::msg::CarlaCameraControl& carla_interfaces::msg::CarlaCameraControl::operator =(
        CarlaCameraControl&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_pan = x.m_pan;
    m_tilt = x.m_tilt;
    m_zoom = x.m_zoom;

    return *this;
}

bool carla_interfaces::msg::CarlaCameraControl::operator ==(
        const CarlaCameraControl& x) const
{

    return (m_header == x.m_header && m_pan == x.m_pan && m_tilt == x.m_tilt && m_zoom == x.m_zoom);
}

bool carla_interfaces::msg::CarlaCameraControl::operator !=(
        const CarlaCameraControl& x) const
{
    return !(*this == x);
}

size_t carla_interfaces::msg::CarlaCameraControl::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_interfaces_msg_CarlaCameraControl_max_cdr_typesize;
}

size_t carla_interfaces::msg::CarlaCameraControl::getCdrSerializedSize(
        const carla_interfaces::msg::CarlaCameraControl& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void carla_interfaces::msg::CarlaCameraControl::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_pan;
    scdr << m_tilt;
    scdr << m_zoom;

}

void carla_interfaces::msg::CarlaCameraControl::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_pan;
    dcdr >> m_tilt;
    dcdr >> m_zoom;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void carla_interfaces::msg::CarlaCameraControl::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void carla_interfaces::msg::CarlaCameraControl::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& carla_interfaces::msg::CarlaCameraControl::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& carla_interfaces::msg::CarlaCameraControl::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member pan
 * @param _pan New value for member pan
 */
void carla_interfaces::msg::CarlaCameraControl::pan(
        float _pan)
{
    m_pan = _pan;
}

/*!
 * @brief This function returns the value of member pan
 * @return Value of member pan
 */
float carla_interfaces::msg::CarlaCameraControl::pan() const
{
    return m_pan;
}

/*!
 * @brief This function returns a reference to member pan
 * @return Reference to member pan
 */
float& carla_interfaces::msg::CarlaCameraControl::pan()
{
    return m_pan;
}

/*!
 * @brief This function sets a value in member tilt
 * @param _tilt New value for member tilt
 */
void carla_interfaces::msg::CarlaCameraControl::tilt(
        float _tilt)
{
    m_tilt = _tilt;
}

/*!
 * @brief This function returns the value of member tilt
 * @return Value of member tilt
 */
float carla_interfaces::msg::CarlaCameraControl::tilt() const
{
    return m_tilt;
}

/*!
 * @brief This function returns a reference to member tilt
 * @return Reference to member tilt
 */
float& carla_interfaces::msg::CarlaCameraControl::tilt()
{
    return m_tilt;
}

/*!
 * @brief This function sets a value in member zoom
 * @param _zoom New value for member zoom
 */
void carla_interfaces::msg::CarlaCameraControl::zoom(
        float _zoom)
{
    m_zoom = _zoom;
}

/*!
 * @brief This function returns the value of member zoom
 * @return Value of member zoom
 */
float carla_interfaces::msg::CarlaCameraControl::zoom() const
{
    return m_zoom;
}

/*!
 * @brief This function returns a reference to member zoom
 * @return Reference to member zoom
 */
float& carla_interfaces::msg::CarlaCameraControl::zoom()
{
    return m_zoom;
}



size_t carla_interfaces::msg::CarlaCameraControl::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_interfaces_msg_CarlaCameraControl_max_key_cdr_typesize;
}

bool carla_interfaces::msg::CarlaCameraControl::isKeyDefined()
{
    return false;
}

void carla_interfaces::msg::CarlaCameraControl::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}



