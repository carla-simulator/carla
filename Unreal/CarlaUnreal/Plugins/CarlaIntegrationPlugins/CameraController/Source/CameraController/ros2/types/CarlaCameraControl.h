// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaCameraControl.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_INTERFACES_MSG_CARLACAMERACONTROL_H_
#define _FAST_DDS_GENERATED_CARLA_INTERFACES_MSG_CARLACAMERACONTROL_H_

#include "carla/ros2/plugin-utils/enable-fastdds-include.h" // start fastdds includes
#include "carla/ros2/types/Header.h"
#include <fastrtps/utils/fixed_size_string.hpp>
#include "carla/ros2/plugin-utils/disable-fastdds-include.h" // end fastdds includes

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CARLACAMERACONTROL_SOURCE)
#define CARLACAMERACONTROL_DllAPI __declspec( dllexport )
#else
#define CARLACAMERACONTROL_DllAPI __declspec( dllimport )
#endif // CARLACAMERACONTROL_SOURCE
#else
#define CARLACAMERACONTROL_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CARLACAMERACONTROL_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace carla_interfaces {
    namespace msg {
        /*!
         * @brief This class represents the structure CarlaCameraControl defined by the user in the IDL file.
         * @ingroup CarlaCameraControl
         */
        class CarlaCameraControl
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport CarlaCameraControl();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~CarlaCameraControl();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object carla_interfaces::msg::CarlaCameraControl that will be copied.
             */
            eProsima_user_DllExport CarlaCameraControl(
                    const CarlaCameraControl& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object carla_interfaces::msg::CarlaCameraControl that will be copied.
             */
            eProsima_user_DllExport CarlaCameraControl(
                    CarlaCameraControl&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object carla_interfaces::msg::CarlaCameraControl that will be copied.
             */
            eProsima_user_DllExport CarlaCameraControl& operator =(
                    const CarlaCameraControl& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object carla_interfaces::msg::CarlaCameraControl that will be copied.
             */
            eProsima_user_DllExport CarlaCameraControl& operator =(
                    CarlaCameraControl&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x carla_interfaces::msg::CarlaCameraControl object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const CarlaCameraControl& x) const;

            /*!
             * @brief Comparison operator.
             * @param x carla_interfaces::msg::CarlaCameraControl object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const CarlaCameraControl& x) const;

            /*!
             * @brief This function copies the value in member header
             * @param _header New value to be copied in member header
             */
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            /*!
             * @brief This function moves the value in member header
             * @param _header New value to be moved in member header
             */
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            /*!
             * @brief This function returns a constant reference to member header
             * @return Constant reference to member header
             */
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            /*!
             * @brief This function returns a reference to member header
             * @return Reference to member header
             */
            eProsima_user_DllExport std_msgs::msg::Header& header();
            /*!
             * @brief This function sets a value in member pan
             * @param _pan New value for member pan
             */
            eProsima_user_DllExport void pan(
                    float _pan);

            /*!
             * @brief This function returns the value of member pan
             * @return Value of member pan
             */
            eProsima_user_DllExport float pan() const;

            /*!
             * @brief This function returns a reference to member pan
             * @return Reference to member pan
             */
            eProsima_user_DllExport float& pan();

            /*!
             * @brief This function sets a value in member tilt
             * @param _tilt New value for member tilt
             */
            eProsima_user_DllExport void tilt(
                    float _tilt);

            /*!
             * @brief This function returns the value of member tilt
             * @return Value of member tilt
             */
            eProsima_user_DllExport float tilt() const;

            /*!
             * @brief This function returns a reference to member tilt
             * @return Reference to member tilt
             */
            eProsima_user_DllExport float& tilt();

            /*!
             * @brief This function sets a value in member zoom
             * @param _zoom New value for member zoom
             */
            eProsima_user_DllExport void zoom(
                    float _zoom);

            /*!
             * @brief This function returns the value of member zoom
             * @return Value of member zoom
             */
            eProsima_user_DllExport float zoom() const;

            /*!
             * @brief This function returns a reference to member zoom
             * @return Reference to member zoom
             */
            eProsima_user_DllExport float& zoom();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const carla_interfaces::msg::CarlaCameraControl& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std_msgs::msg::Header m_header;
            float m_pan;
            float m_tilt;
            float m_zoom;

        };
    } // namespace msg
} // namespace carla_interfaces

#endif // _FAST_DDS_GENERATED_CARLA_INTERFACES_MSG_CARLACAMERACONTROL_H_

